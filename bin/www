const app = require('../app');
const debug = require('debug')('vislect-web:server');
const http = require('http');
const https = require('https');
const fs = require('fs');

const httpPort = normalizePort(80);
const httpsPort = normalizePort(443);
app.set('port', httpsPort);

const options = {
  key: fs.readFileSync('/etc/letsencrypt/live/vislect.com/privkey.pem'),
  cert: fs.readFileSync('/etc/letsencrypt/live/vislect.com/fullchain.pem')
};

const server = https.createServer(options, app);


server.listen(httpsPort);
server.on('error', onError);
server.on('listening', () => {
  console.log('HTTPS Server running on port ' + httpsPort);
});

const httpServer = http.createServer(app);
httpServer.listen(httpPort, () => {
  console.log('HTTP Server running on port ' + httpPort);
});
httpServer.on('request', (req, res) => {
  res.writeHead(301, { "Location": "https://" + req.headers['host'] + req.url });
  res.end();
});


function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) return val;
  if (port >= 0) return port;

  return false;
}


function onError(error) {
  if (error.syscall !== 'listen') throw error;

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

